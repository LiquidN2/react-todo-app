{"version":3,"sources":["reducers/taskReducer.js","constants/taskActionTypes.js","store/store.js","components/FormTodo.jsx","actions/taskActions.js","components/ListItem.jsx","components/TodoList.jsx","App.js","index.js"],"names":["initialState","tasks","taskReducer","state","action","type","tasksAfterAdding","task","updatedStatusTasks","map","id","taskId","selected","updatedTasks","name","taskUpdate","tasksAfterDeleting","filter","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","FormToDo","props","handleInputChange","event","target","value","checked","setState","handleFormSubmit","preventDefault","addTask","className","onSubmit","this","placeholder","onChange","maxLength","required","Component","connect","dispatch","uuidv1","ListItem","handleDelete","handleSelect","handleUpdate","useState","taskName","setTaskName","styleLabelInput","onBlur","length","alert","onKeyPress","key","blur","minLength","onClick","TodoList","selectTask","handleSelectAll","selectAllTasks","existingTasks","JSON","parse","localStorage","getItem","setTasks","setItem","stringify","deleteTask","deleteSelectedTasks","updateTask","htmlFor","App","FormTodo","JSX","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c5c0d13.chunk.js","sourcesContent":["import {\r\n  SET_TASKS,\r\n  ADD_TASK,\r\n  SELECT_TASK,\r\n  SELECT_ALL_TASKS,\r\n  UPDATE_TASK,\r\n  DELETE_TASK,\r\n  DELETE_SELECTED_TASKS,\r\n  DELETE_ALL_TASKS,\r\n} from '../constants/taskActionTypes';\r\n\r\nconst initialState = {\r\n  tasks: [],\r\n};\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_TASKS:\r\n      return { ...state, tasks: action.tasks };\r\n\r\n    case ADD_TASK: {\r\n      const tasksAfterAdding = [...state.tasks, action.task];\r\n      return { ...state, tasks: tasksAfterAdding };\r\n    }\r\n\r\n    case SELECT_TASK: {\r\n      const updatedStatusTasks = state.tasks.map(task => {\r\n        if (task.id === action.taskId) {\r\n          return { ...task, selected: action.selected };\r\n        } else {\r\n          return task;\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        tasks: updatedStatusTasks,\r\n      };\r\n    }\r\n\r\n    case SELECT_ALL_TASKS: {\r\n      const updatedStatusTasks = state.tasks.map(task => {\r\n        return { ...task, selected: action.selected };\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        tasks: updatedStatusTasks,\r\n      };\r\n    }\r\n\r\n    case UPDATE_TASK: {\r\n      const updatedTasks = state.tasks.map(task => {\r\n        if (task.id === action.taskId) {\r\n          return { ...task, name: action.taskUpdate };\r\n        } else {\r\n          return task;\r\n        }\r\n      });\r\n\r\n      return { ...state, tasks: updatedTasks };\r\n    }\r\n\r\n    case DELETE_TASK: {\r\n      const tasksAfterDeleting = state.tasks.filter(\r\n        task => task.id !== action.taskId\r\n      );\r\n\r\n      return { ...state, tasks: tasksAfterDeleting };\r\n    }\r\n\r\n    case DELETE_SELECTED_TASKS: {\r\n      const tasksAfterDeleting = state.tasks.filter(task => !task.selected);\r\n\r\n      return { ...state, tasks: tasksAfterDeleting };\r\n    }\r\n\r\n    case DELETE_ALL_TASKS:\r\n      return { ...state, tasks: [] };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default taskReducer;\r\n","export const ADD_TASK = 'ADD_TASK';\r\nexport const SET_TASKS = 'SET_TASKS';\r\nexport const UPDATE_TASK = 'UPDATE_TASK';\r\nexport const SELECT_TASK = 'SELECT_TASK';\r\nexport const SELECT_ALL_TASKS = 'SELECT_ALL_TASKS';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const DELETE_TASKS = 'DELETE_TASKS';\r\nexport const DELETE_SELECTED_TASKS = 'DELETE_SELECTED_TASKS';\r\nexport const DELETE_ALL_TASKS = 'DELETE_ALL_TASKS';\r\n","import { createStore } from \"redux\";\r\nimport taskReducer from \"../reducers/taskReducer\";\r\n\r\nconst store = createStore(\r\n  taskReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { addTask } from '../actions/taskActions';\r\n\r\nclass FormToDo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      task: '',\r\n    };\r\n  }\r\n\r\n  handleInputChange = event => {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.addTask(this.state.task);\r\n    this.setState({ task: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        className=\"form-inline form-inline--flex-end ma-top-md\"\r\n        onSubmit={this.handleFormSubmit}\r\n      >\r\n        <div className=\"form-group form-group--inline-extends\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control form-control--inline-extends\"\r\n            id=\"task\"\r\n            name=\"task\"\r\n            placeholder=\"Enter new task (max length 40 characters)\"\r\n            value={this.state.task}\r\n            onChange={this.handleInputChange}\r\n            maxLength=\"40\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Add Task\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nFormToDo.propTypes = {\r\n  addTask: PropTypes.func,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addTask: task => dispatch(addTask(task)),\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(FormToDo);\r\n","import uuidv1 from 'uuid/v1';\r\n\r\nimport {\r\n  SET_TASKS,\r\n  ADD_TASK,\r\n  SELECT_TASK,\r\n  SELECT_ALL_TASKS,\r\n  UPDATE_TASK,\r\n  DELETE_TASK,\r\n  DELETE_SELECTED_TASKS,\r\n  DELETE_ALL_TASKS,\r\n} from '../constants/taskActionTypes';\r\n\r\nexport const setTasks = tasks => ({\r\n  type: SET_TASKS,\r\n  tasks,\r\n});\r\n\r\nexport const addTask = task => ({\r\n  type: ADD_TASK,\r\n  task: {\r\n    id: uuidv1(),\r\n    name: task,\r\n    selected: false,\r\n  },\r\n});\r\n\r\nexport const selectTask = (taskId, selected) => ({\r\n  type: SELECT_TASK,\r\n  taskId,\r\n  selected,\r\n});\r\n\r\nexport const selectAllTasks = selected => ({\r\n  type: SELECT_ALL_TASKS,\r\n  selected,\r\n});\r\n\r\nexport const updateTask = (taskId, taskUpdate) => ({\r\n  type: UPDATE_TASK,\r\n  taskId,\r\n  taskUpdate,\r\n});\r\n\r\nexport const deleteTask = taskId => ({\r\n  type: DELETE_TASK,\r\n  taskId,\r\n});\r\n\r\nexport const deleteSelectedTasks = () => ({\r\n  type: DELETE_SELECTED_TASKS,\r\n});\r\n\r\nexport const deleteAllTasks = () => ({\r\n  type: DELETE_ALL_TASKS,\r\n});\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ListItem = ({\r\n  id,\r\n  name,\r\n  selected,\r\n  handleDelete,\r\n  handleSelect,\r\n  handleUpdate,\r\n}) => {\r\n  const [taskName, setTaskName] = useState(name);\r\n\r\n  const handTaskNameChange = event => {\r\n    setTaskName(event.target.value);\r\n  };\r\n\r\n  const handleBlur = event => {\r\n    const { name: taskId, value: taskUpdate } = event.target;\r\n    if (taskUpdate.length === 0) {\r\n      alert('Empty task will not be saved!');\r\n    } else {\r\n      handleUpdate(taskId, taskUpdate);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = event => {\r\n    if (event.key === 'Enter') {\r\n      event.target.blur();\r\n    }\r\n  };\r\n\r\n  const styleLabelInput = `list-group-item__label-input ${\r\n    selected ? 'list-group-item__label-input--selected' : ''\r\n  }`;\r\n\r\n  return (\r\n    <li className=\"list-group-item\">\r\n      <input\r\n        className=\"list-group-item__checkbox\"\r\n        type=\"checkbox\"\r\n        id={id}\r\n        name={id}\r\n        onChange={handleSelect}\r\n        checked={selected}\r\n      />\r\n\r\n      <input\r\n        type=\"text\"\r\n        className={styleLabelInput}\r\n        id={id}\r\n        name={id}\r\n        value={taskName}\r\n        onBlur={handleBlur}\r\n        onChange={handTaskNameChange}\r\n        onKeyPress={handleKeyPress}\r\n        minLength=\"1\"\r\n        maxLength=\"40\"\r\n      />\r\n\r\n      <div className=\"list-group-item__remove\" onClick={handleDelete}>\r\n        <i className=\"fas fa-times\" />\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nListItem.propTypes = {\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  selected: PropTypes.bool,\r\n  handleDelete: PropTypes.func,\r\n  handleSelect: PropTypes.func,\r\n  handleUpdate: PropTypes.func,\r\n};\r\n\r\nexport default ListItem;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n  setTasks,\r\n  selectTask,\r\n  selectAllTasks,\r\n  updateTask,\r\n  deleteTask,\r\n  deleteSelectedTasks,\r\n} from '../actions/taskActions';\r\n\r\nimport ListItem from './ListItem';\r\n\r\nclass TodoList extends Component {\r\n  componentDidMount() {\r\n    const existingTasks = JSON.parse(localStorage.getItem('tasks'));\r\n    this.props.setTasks(existingTasks);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    localStorage.setItem('tasks', JSON.stringify(this.props.tasks));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    localStorage.setItem('tasks', JSON.stringify(this.props.tasks));\r\n  }\r\n\r\n  handleSelect = event => {\r\n    const { name, checked } = event.target;\r\n    this.props.selectTask(name, checked);\r\n  };\r\n\r\n  handleSelectAll = event => {\r\n    this.props.selectAllTasks(event.target.checked);\r\n  };\r\n\r\n  render() {\r\n    const { tasks, deleteTask, deleteSelectedTasks, updateTask } = this.props;\r\n\r\n    return (\r\n      <Fragment>\r\n        {tasks.length > 0 ? (\r\n          <div className=\"task-list-header ma-top-md\">\r\n            <div className=\"form-check form-check--aligned\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                id=\"allTasks\"\r\n                name=\"allTasks\"\r\n                onChange={this.handleSelectAll}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"allTasks\">\r\n                Select all\r\n              </label>\r\n            </div>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-secondary\"\r\n              onClick={deleteSelectedTasks}\r\n            >\r\n              <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n\r\n        <ul className=\"list-group ma-top-sm\">\r\n          {tasks.map(({ id, name, selected }) => (\r\n            <ListItem\r\n              key={id}\r\n              id={id}\r\n              name={name}\r\n              selected={selected}\r\n              handleSelect={this.handleSelect}\r\n              handleDelete={() => deleteTask(id)}\r\n              handleUpdate={updateTask}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nTodoList.propTypes = {\r\n  tasks: PropTypes.array,\r\n  setTasks: PropTypes.func,\r\n  selectTask: PropTypes.func,\r\n  selectAllTasks: PropTypes.func,\r\n  updateTask: PropTypes.func,\r\n  deleteTask: PropTypes.func,\r\n  deleteSelectedTasks: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  tasks: state.tasks,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setTasks: tasks => dispatch(setTasks(tasks)),\r\n  selectTask: (taskId, selected) => dispatch(selectTask(taskId, selected)),\r\n  selectAllTasks: selected => dispatch(selectAllTasks(selected)),\r\n  updateTask: (taskId, taskUpdate) => dispatch(updateTask(taskId, taskUpdate)),\r\n  deleteTask: taskId => dispatch(deleteTask(taskId)),\r\n  deleteSelectedTasks: () => dispatch(deleteSelectedTasks()),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList);\r\n","import React from 'react';\n// import logo from './logo.svg';\n// import './App.scss';\n\nimport FormTodo from './components/FormTodo';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>\n        <i className=\"fas fa-list\" /> To-Do App\n      </h1>\n      <p className=\"lead ma-top-md\">\n        A simple To-do application built with <code>React</code> and{' '}\n        <code>Redux</code>. Data is persisted to <code>localStorage</code>.\n      </p>\n      <FormTodo />\n\n      <TodoList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nimport './styles/main.scss';\nimport App from './App';\n\nconst JSX = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(JSX, document.getElementById('root'));\n"],"sourceRoot":""}